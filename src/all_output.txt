Given the complexity of the application, we will need to create several classes, functions, and methods. Here is a high-level overview:

1. `Business` class: Represents a business in the system. Contains properties such as `Id`, `Name`, `Email`, `RewardScheme`.
2. `Customer` class: Represents a customer in the system. Contains properties such as `Id`, `Username`, `Email`, `Businesses`.
3. `RewardScheme` class: Represents a reward scheme defined by a business. Contains properties such as `Id`, `BusinessId`, `RewardDescription`, `StampsRequired`.
4. `Stamp` class: Represents a stamp that a customer can earn. Contains properties such as `Id`, `CustomerId`, `BusinessId`, `TimeStamp`.
5. `BusinessController` class: Contains methods for handling HTTP requests related to businesses.
6. `CustomerController` class: Contains methods for handling HTTP requests related to customers.
7. `QRCodeService` class: Contains methods for generating and decoding QR codes.
8. `AuthenticationService` class: Contains methods for handling authentication and authorization using Azure AD B2C.
9. `DatabaseContext` class: Represents the database context for Entity Framework Core.
10. `Startup` class: Contains methods for configuring the application.

Now, let's start with the entry point of the application, the `Program.cs` file:

Program.cs
```csharp
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace LoyaltyApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
```

Next, let's define the `Startup` class in the `Startup.cs` file:

Startup.cs
```csharp
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using LoyaltyApp.Services;
using LoyaltyApp.Models;

namespace LoyaltyApp
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddDbContext<DatabaseContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
            services.AddScoped<QRCodeService>();
            services.AddScoped<AuthenticationService>();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
```

Next, let's define the `Business`, `Customer`, `RewardScheme`, and `Stamp` classes in the `Models` folder:

Models/Business.cs
```csharp
using System.Collections.Generic;

namespace LoyaltyApp.Models
{
    public class Business
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public RewardScheme RewardScheme { get; set; }
    }
}
```

Models/Customer.cs
```csharp
using System.Collections.Generic;

namespace LoyaltyApp.Models
{
    public class Customer
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public List<Business> Businesses { get; set; }
    }
}
```

Models/RewardScheme.cs
```csharp
namespace LoyaltyApp.Models
{
    public class RewardScheme
    {
        public int Id { get; set; }
        public int BusinessId { get; set; }
        public string RewardDescription { get; set; }
        public int StampsRequired { get; set; }
    }
}
```

Models/Stamp.cs
```csharp
using System;

namespace LoyaltyApp.Models
{
    public class Stamp
    {
        public int Id { get; set; }
        public int CustomerId { get; set; }
        public int BusinessId { get; set; }
        public DateTime TimeStamp { get; set; }
    }
}
```

Next, let's define the `DatabaseContext` class in the `Data` folder:

Data/DatabaseContext.cs
```csharp
using Microsoft.EntityFrameworkCore;
using LoyaltyApp.Models;

namespace LoyaltyApp.Data
{
    public class DatabaseContext : DbContext
    {
        public DatabaseContext(DbContextOptions<DatabaseContext> options)
            : base(options)
        {
        }

        public DbSet<Business> Businesses { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<RewardScheme> RewardSchemes { get; set; }
        public DbSet<Stamp> Stamps { get; set; }
    }
}
```

Next, let's define the `BusinessController` and `CustomerController` classes in the `Controllers` folder:

Controllers/BusinessController.cs
```csharp
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using LoyaltyApp.Data;
using LoyaltyApp.Models;

namespace LoyaltyApp.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BusinessController : ControllerBase
    {
        private readonly DatabaseContext _context;

        public BusinessController(DatabaseContext context)
        {
            _context = context;
        }

        // Other methods for handling HTTP requests related to businesses...
    }
}
```

Controllers/CustomerController.cs
```csharp
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using LoyaltyApp.Data;
using LoyaltyApp.Models;

namespace LoyaltyApp.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CustomerController : ControllerBase
    {
        private readonly DatabaseContext _context;

        public CustomerController(DatabaseContext context)
        {
            _context = context;
        }

        // Other methods for handling HTTP requests related to customers...
    }
}
```

Next, let's define the `QRCodeService` and `AuthenticationService` classes in the `Services` folder:

Services/QRCodeService.cs
```csharp
using System;
using System.Drawing;
using QRCoder;

namespace LoyaltyApp.Services
{
    public class QRCodeService
    {
        public Bitmap GenerateQRCode(string data)
        {
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new QRCode(qrCodeData);
            Bitmap qrCodeImage = qrCode.GetGraphic(20);
            return qrCodeImage;
        }

        // Other methods for decoding QR codes...
    }
}
```

Services/AuthenticationService.cs
```csharp
namespace LoyaltyApp.Services
{
    public class AuthenticationService
    {
        // Methods for handling authentication and authorization using Azure AD B2C...
    }
}
```

Finally, let's define the HTML, CSS, and JavaScript files for each interface in the `wwwroot` folder:

wwwroot/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Loyalty App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- HTML for the business and customer interfaces... -->
    <script src="scripts.js"></script>
</body>
</html>
```

wwwroot/styles.css
```css
/* CSS for the business and customer interfaces... */
```

wwwroot/scripts.js
```javascript
// JavaScript for the business and customer interfaces...
```

This is a high-level overview of the application's architecture. Each file contains the necessary imports, types, etc. The code in different files is compatible with each other. All parts of the architecture are present in the files.